from tkinter import Tk, Frame, Label, CENTER, BOTH
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import datetime
from imutils import face_utils
import dlib
import cv2
import sys
import os
from io import BytesIO
import base64

scr = Tk()

bs64icon=""

try:
    with open("./address.cfg") as f:
        IP_ADDRESS = f.read().strip()
except FileNotFoundError:
    IP_ADDRESS = "192.168.4.1"

try:
    s = sys.argv[1]
    if s == "-webcam":
        IP_ADDRESS = 0
except:
    pass

icon_data = base64.b64decode(bs64icon)
icon_image = Image.open(BytesIO(icon_data))
icon_photo = ImageTk.PhotoImage(icon_image)
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("landmarks68.dat")
vid = cv2.VideoCapture(IP_ADDRESS)
REC_ = False


def _darkTitleBar(self):
    import ctypes as ctp
    self.update()
    DWMA_USE_IMMERSIVE_DARK_MODE = 20 
    windowAttributes = ctp.windll.dwmapi.DwmSetWindowAttribute
    getParent = ctp.windll.user32.GetParent
    hwnd = getParent(self.winfo_id())
    renderingPolicy = DWMA_USE_IMMERSIVE_DARK_MODE
    val = 2
    val = ctp.c_int(val)
    windowAttributes(hwnd, renderingPolicy, ctp.byref(val), ctp.sizeof(val))

def record():
    global FILE, REC_, out
    FILE = f"{datetime.datetime.now().strftime("Record_%d.%m.%Y_%H%M%S.%f")}.mp4"
    REC_ = True

    framewWd = int(vid.get(cv2.CAP_PROP_FRAME_WIDTH))
    framehHt = int(vid.get(cv2.CAP_PROP_FRAME_HEIGHT))
    frameRate = int(vid.get(cv2.CAP_PROP_FPS))

    fourcc = cv2.VideoWriter_fourcc(*"XVID")

    out = cv2.VideoWriter(FILE, fourcc, frameRate, (framewWd, framehHt))

def save_record():
    out.release()
    a = messagebox.askyesno("Record Save", "Do you want to save this record video?")
    if a:
        file = filedialog.asksaveasfilename(defaultextension=".mp4", initialfile=FILE)
        if file:
            import shutil
            shutil.copy2(FILE, file)
            messagebox.showinfo("Record Save", f"Record saved to {file}")
        else:
            messagebox.showinfo("Record Save", f"File not saved!                    ")

def askfor():
    save_record()
    scr.destroy()

scr.title("Fire Robot v1")
scr.geometry("900x600")
scr.resizable(False, False)
scr.iconphoto(False, icon_photo)
frame = Frame(scr, background="black")
text = Label(frame, text="Recording ...", bg="#000000", fg="#ffffff")
text.place(x=0, y=0)
img_frame = Label(frame, background="black")
img_frame.place(anchor=CENTER, relx=.5, rely=.5)
frame.pack(fill=BOTH, expand=True)

def find_bounding_square(points, radius):
    min_x = min(point[0] - radius for point in points)
    max_x = max(point[0] + radius for point in points)
    min_y = min(point[1] - radius for point in points)
    max_y = max(point[1] + radius for point in points)
    square_side = max(max_x - min_x, max_y - min_y)
    bottom_left = (min_x, min_y - 50)
    top_right = (min_x + square_side, min_y + square_side)
    
    return bottom_left, top_right

def open_camera(): 
    global hasMINI
    _, frame = vid.read() 
    gray =  gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    rects = detector(gray, 0)
    for (i, rect) in enumerate(rects):
        shape = predictor(gray, rect)
        shape = face_utils.shape_to_np(shape)
        shape = [tuple(x.tolist()) for x in shape]
        t, b = find_bounding_square(shape, 1)
        cv2.rectangle(frame, t, b, (255, 0, 0), 2)
    opencv_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA) 
    if REC_ == True:
        out.write(frame)
    img_h, img_w, channel = opencv_image.shape
    rv = 550 / img_h
    captured_image = Image.fromarray(opencv_image) 
    captured_image = captured_image.resize((int(img_w * rv), int(img_h * rv)))
    photo_image = ImageTk.PhotoImage(image=captured_image) 
    img_frame.photo_image = photo_image 
    img_frame.configure(image=photo_image)
    img_frame.after(10, open_camera) 

open_camera()
record()
scr.protocol("WM_DELETE_WINDOW", askfor)

_darkTitleBar(scr)
scr.mainloop()

os.remove(FILE)